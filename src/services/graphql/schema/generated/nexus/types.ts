/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../../../context/index"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ResolveNameQueryInput: { // input type
    domain: string; // String!
    type: NexusGenEnums['RRType']; // RRType!
  }
}

export interface NexusGenEnums {
  RRType: "A" | "AAAA" | "CNAME" | "MX" | "NAPTR" | "NS" | "PTR" | "SOA" | "SRV" | "TXT"
}

export interface NexusGenRootTypes {
  AnyARecord: { // root type
    address: Array<string | null>; // [String]!
    ttl: number; // Int!
  }
  AnyAaaaRecord: { // root type
    address: Array<string | null>; // [String]!
    ttl: number; // Int!
  }
  AnyCnameRecord: { // root type
    value?: string | null; // String
  }
  AnyMxRecord: { // root type
    exchange: Array<string | null>; // [String]!
    priority: Array<number | null>; // [Int]!
  }
  AnyNaptrRecord: { // root type
    flags: string; // String!
    order: number; // Int!
    preference: number; // Int!
    regexp?: string | null; // String
    replacement?: string | null; // String
    service: string; // String!
  }
  AnyNsRecord: { // root type
    value: string; // String!
  }
  AnyPtrRecord: { // root type
    value: string; // String!
  }
  AnySoaRecord: { // root type
    expire: number; // Int!
    hostmaster: string; // String!
    minttl: number; // Int!
    nsname: string; // String!
    refresh: number; // Int!
    retry: number; // Int!
    serial: number; // Int!
  }
  AnySrvRecord: { // root type
    name: string; // String!
    port: number; // Int!
    priority: number; // Int!
    weight: number; // Int!
  }
  AnyTxtRecord: { // root type
    entries: Array<string | null>; // [String]!
  }
  Query: {};
  MxRecord: NexusGenRootTypes['AnyMxRecord'];
  NaptrRecord: NexusGenRootTypes['AnyNaptrRecord'];
  RecordWithTtl: NexusGenRootTypes['AnyAaaaRecord'] | NexusGenRootTypes['AnyARecord'];
  SoaRecord: NexusGenRootTypes['AnySoaRecord'];
  SrvRecord: NexusGenRootTypes['AnySrvRecord'];
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  AnyResolutionRecord: NexusGenRootTypes['AnyAaaaRecord'] | NexusGenRootTypes['AnyARecord'] | NexusGenRootTypes['AnyCnameRecord'] | NexusGenRootTypes['AnyMxRecord'] | NexusGenRootTypes['AnyNaptrRecord'] | NexusGenRootTypes['AnyNsRecord'] | NexusGenRootTypes['AnyPtrRecord'] | NexusGenRootTypes['AnySoaRecord'] | NexusGenRootTypes['AnySrvRecord'] | NexusGenRootTypes['AnyTxtRecord'];
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ResolveNameQueryInput: NexusGenInputs['ResolveNameQueryInput'];
  RRType: NexusGenEnums['RRType'];
}

export interface NexusGenFieldTypes {
  AnyARecord: { // field return type
    address: Array<string | null>; // [String]!
    ttl: number; // Int!
    type: NexusGenEnums['RRType']; // RRType!
  }
  AnyAaaaRecord: { // field return type
    address: Array<string | null>; // [String]!
    ttl: number; // Int!
    type: NexusGenEnums['RRType']; // RRType!
  }
  AnyCnameRecord: { // field return type
    type: NexusGenEnums['RRType']; // RRType!
    value: string | null; // String
  }
  AnyMxRecord: { // field return type
    exchange: Array<string | null>; // [String]!
    priority: Array<number | null>; // [Int]!
    type: NexusGenEnums['RRType']; // RRType!
  }
  AnyNaptrRecord: { // field return type
    flags: string; // String!
    order: number; // Int!
    preference: number; // Int!
    regexp: string | null; // String
    replacement: string | null; // String
    service: string; // String!
    type: NexusGenEnums['RRType']; // RRType!
  }
  AnyNsRecord: { // field return type
    type: NexusGenEnums['RRType']; // RRType!
    value: string; // String!
  }
  AnyPtrRecord: { // field return type
    type: NexusGenEnums['RRType']; // RRType!
    value: string; // String!
  }
  AnySoaRecord: { // field return type
    expire: number; // Int!
    hostmaster: string; // String!
    minttl: number; // Int!
    nsname: string; // String!
    refresh: number; // Int!
    retry: number; // Int!
    serial: number; // Int!
    type: NexusGenEnums['RRType']; // RRType!
  }
  AnySrvRecord: { // field return type
    name: string; // String!
    port: number; // Int!
    priority: number; // Int!
    type: NexusGenEnums['RRType']; // RRType!
    weight: number; // Int!
  }
  AnyTxtRecord: { // field return type
    entries: Array<string | null>; // [String]!
    type: NexusGenEnums['RRType']; // RRType!
  }
  Query: { // field return type
    resolveName: Array<NexusGenRootTypes['AnyResolutionRecord'] | null>; // [AnyResolutionRecord]!
  }
  MxRecord: { // field return type
    exchange: Array<string | null>; // [String]!
    priority: Array<number | null>; // [Int]!
  }
  NaptrRecord: { // field return type
    flags: string; // String!
    order: number; // Int!
    preference: number; // Int!
    regexp: string | null; // String
    replacement: string | null; // String
    service: string; // String!
  }
  RecordWithTtl: { // field return type
    address: Array<string | null>; // [String]!
    ttl: number; // Int!
  }
  SoaRecord: { // field return type
    expire: number; // Int!
    hostmaster: string; // String!
    minttl: number; // Int!
    nsname: string; // String!
    refresh: number; // Int!
    retry: number; // Int!
    serial: number; // Int!
  }
  SrvRecord: { // field return type
    name: string; // String!
    port: number; // Int!
    priority: number; // Int!
    weight: number; // Int!
  }
}

export interface NexusGenArgTypes {
  Query: {
    resolveName: { // args
      input: NexusGenInputs['ResolveNameQueryInput']; // ResolveNameQueryInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  AnyResolutionRecord: "AnyAaaaRecord" | "AnyARecord" | "AnyCnameRecord" | "AnyMxRecord" | "AnyNaptrRecord" | "AnyNsRecord" | "AnyPtrRecord" | "AnySoaRecord" | "AnySrvRecord" | "AnyTxtRecord"
  MxRecord: "AnyMxRecord"
  NaptrRecord: "AnyNaptrRecord"
  RecordWithTtl: "AnyAaaaRecord" | "AnyARecord"
  SoaRecord: "AnySoaRecord"
  SrvRecord: "AnySrvRecord"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AnyARecord" | "AnyAaaaRecord" | "AnyCnameRecord" | "AnyMxRecord" | "AnyNaptrRecord" | "AnyNsRecord" | "AnyPtrRecord" | "AnySoaRecord" | "AnySrvRecord" | "AnyTxtRecord" | "Query";

export type NexusGenInputNames = "ResolveNameQueryInput";

export type NexusGenEnumNames = "RRType";

export type NexusGenInterfaceNames = "MxRecord" | "NaptrRecord" | "RecordWithTtl" | "SoaRecord" | "SrvRecord";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = "AnyResolutionRecord";

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}